#!/bin/bash
#
# Copyright 2015 tablet mode <tablet-mode@monochromatic.cc>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# absolution
# 	> absolution is a very rudimentary script 
# 	  to make the use of abs easier
#
# Dependencies:
#   > bash
#   > findutils
#   > pacman
#   > abs
#   > sudo
#   > vim


#===============#
# CONFIGURATION #
#===============#
ABSDIR="$HOME/abs"
DIFFPRG="/usr/bin/vimdiff"


#===========#
# FUNCTIONS #
#===========#
function copyPkg {
    for q in $PKGPATH; do
        p=$(echo $q | grep -Eo '[a-z]*$')
        if [[ $(stat $ABSDIR/$p 2> /dev/null) ]]; then
            echo ":: updating $p ::"
            cp "$ABSDIR"/$p/PKGBUILD "$ABSDIR"/PKGBUILD.old
            rm -r "$ABSDIR"/$p
            cp -r $q "$ABSDIR"
            mv "$ABSDIR"/PKGBUILD.old "$ABSDIR"/$p/PKGBUILD.old
        else
            echo ":: fetching $p ::"
            cp -r $q "$ABSDIR"
        fi
    done
    echo "== done =="
}


function updateTree {
    echo ""
    echo ":: updating abs tree ::"
    echo "  this action requires the use of sudo"
    echo "  please type in your password when prompted"
    sudo /usr/bin/abs
}

function modifyBuild {
    for p in $UPKG; do
        if [[ $(stat $ABSDIR/$p/PKGBUILD.old) ]]; then
            echo ":: comparing PKGBUILDs ::"
            $DIFFPRG $ABSDIR/$p/PKGBUILD $ABSDIR/$p/PKGBUILD.old
            echo "== done =="
        else
            echo ":: opening PKGBUILD ::"
            $EDITOR $ABSDIR/$p/PKGBUILD
            echo "== done =="
        fi
    done
}

function setPaths {
    echo ":: setting paths ::"

    for a in $@; do
        UPKG+=$a" "
    done

    for p in $UPKG; do
        PKGPATH+=$(find /var/abs -name $p)" "
    done
    echo "== done =="
}

function buildPkg {
    for p in $UPKG; do
        echo ":: starting build ::"
        cd "$ABSDIR"/$p
        makepkg -sc
    done
}

function installPkg {
    for p in $UPKG; do
        echo ":: starting build ::"
        cd "$ABSDIR"/$p
        makepkg -sci
    done
}

function showArgs {
    for p in "$@"; do
        echo "[$p]"
    done
}

function showHelp {
    echo "       _               _       _   _ "
    echo "  __ _| |__  ___  ___ | |_   _| |_(_) ___  _ __ "
    echo " / _' | '_ \/ __|/ _ \| | | | | __| |/ _ \| '_ \ "
    echo "| (_| | |_) \__ \ (_) | | |_| | |_| | (_) | | | | "
    echo " \__,_|_.__/|___/\___/|_|\__,_|\__|_|\___/|_| |_| "
    echo ""
    echo "Usage: $0 [ -bcimu ] <pkgname>"
    echo "  b ... only build package, don't install it"
    echo "  c ... copy package folder to your build directory"
    echo "  i ... build and install package"
    echo "  m ... show/modify PKGBUILD"
    echo "  u ... update the abs tree"
    echo ""
    echo "Example:"
    echo "  $0 -ci coolprogram"
    echo "    will copy coolprogram from the abs tree 
    to your build directory, build and install it."
    echo "    The flags can be arranged in any sequence. So"
    echo "  $0 -ic coolprogram"
    echo "    would work too."
}


#================#
# FUNCTION CALLS #
#================#

if [[ $1 == "-"[ucbmia]* && $(echo $1 | grep -oce [^-ucmbia]) == 0 ]]; then
    setPaths ${@:2}
    if [[ $1 == *u* ]]; then
        echo "  ...update the abs tree"
        updateTree
    fi

    if [[ $1 == *c* ]]; then
        if [[ $2 ]]; then
            echo "  ...copy to build directory"
            copyPkg
        else
            showHelp
        fi
    fi

    if [[ $1 == *m* ]]; then
        if [[ $2 ]]; then
            echo "  ...modify the PKGBUILD"
            modifyBuild
        else
            showHelp
        fi
    fi

    if [[ $1 == *b* ]]; then
        if [[ $2 ]]; then
            echo "  ...build the package"
            buildPkg
        else
            showHelp
        fi
    fi

    if [[ $1 == *i* ]]; then
        if [[ $2 ]]; then
            echo "  ...install the package"
            installPkg
        else
            showHelp
        fi
    fi

    if [[ $1 == *a* ]]; then
        if [[ $2 ]]; then
            echo "  ...update the abs tree"
            echo "  ...copy to build directory"
            echo "  ...modify the PKGBUILD"
            echo "  ...build the package"
            echo "  ...install the package"

            updateTree
            copyPkg
        else
            showHelp
        fi
    fi
else
    showHelp
fi
